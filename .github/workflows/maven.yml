name: fastfood-production-CICD

on:
  push:
     branches:
       - main
jobs:
  Unit-Tests:
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - run: cd fastfood-production && mvn clean package

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: >
          fastfood-production/target/site/jacoco/jacoco.csv

    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
  
 
  Build:
 
    runs-on: ubuntu-latest
    needs: Unit-Tests
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build Project and Generate Docker Image
      run: cd fastfood-production && mvn clean install -DskipTests --file pom.xml
   
    - name: Push Image to DockerHub
      run: cd fastfood-production && mvn dockerfile:push

  
  Deploy_EKS:
      needs: Build
      runs-on: ubuntu-latest
     
      steps:
   
      - uses: actions/checkout@v3
 
      - name: Configurando Credenciais AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1
 
      - name: Kubectl Tool Setup
        uses: Azure/setup-kubectl@v3
 
      - run: aws sts get-caller-identity
       
      - run: aws eks update-kubeconfig --region us-east-1 --name fastfood-management-cluster

      - run: cd fastfood-production && kubectl apply -k k8s 
      
    
      

 
